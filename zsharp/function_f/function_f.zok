import "../hash/poseidon"
from "../curves/point" import Point
from "../curves/params" import CurveParams, VESTA_PARAMS
from "../signature/schnorr" import SchnorrSignature, verify

const u32 DOMAIN_SEPARATOR_HASH = 0
const u32 DOMAIN_SEPARATOR_COMMITMENT = 1
const u32 DOMAIN_SEPARATOR_SIGNATURE = 2
const u32 DOMAIN_SEPARATOR_PRF = 3

// open(com, r) = k
def generate_commitment(field com,  field r,  field k) -> field:
    field[2] com_inputs = [0; 2]
    com_inputs[0] = k
    com_inputs[1] = r

    field com_output = poseidon(com_inputs, DOMAIN_SEPARATOR_COMMITMENT)

    return com_output


def generate_hash(field nonce,  field message_hash,  field tag,  field h) -> field:
    field[4] hash_inputs = [0; 4]
    hash_inputs[0] = nonce
    hash_inputs[1] = message_hash
    hash_inputs[2] = tag
    hash_inputs[3] = h

    field hash_output = poseidon(hash_inputs, DOMAIN_SEPARATOR_HASH)

    return hash_output


def generate_prf(field k,  field nonce,  field message_hash) -> field:
    field[3] prf_inputs = [0; 3]
    prf_inputs[0] = k
    prf_inputs[1] = nonce
    prf_inputs[2] = message_hash

    field prf_output = poseidon(prf_inputs, DOMAIN_SEPARATOR_PRF)

    return prf_output


// Sig.Verify(pk_id, sign_start, (com_k, t_start))
def verify_sign_start(field pk_id_x, field pk_id_y, field sign_start_R_x, field sign_start_R_y, field sign_start_s, field com_k, field t_start_nonce, field t_start_tag, field t_start_h) -> field:
    Point pk = Point { x: pk_id_x, y: pk_id_y }
    Point sign_R = Point { x: sign_start_R_x, y: sign_start_R_y }
    SchnorrSignature sign = SchnorrSignature { R: sign_R, s: sign_start_s }

    field[4] sign_messages = [0; 4]
    sign_messages[0] = com_k
    sign_messages[1] = t_start_nonce
    sign_messages[2] = t_start_tag
    sign_messages[3] = t_start_h

    field result = verify(pk, sign_messages, sign, VESTA_PARAMS)

    return result


// Sig.Verify(pk_sp, sign_ban_over, t_i)
def verify_sign_ban_over(field pk_sp_x, field pk_sp_y, field sign_R_x, field sign_R_y, field sign_s, field t_i_nonce, field t_i_message_hash, field t_i_tag, field t_i_h) -> field:
    Point pk = Point { x: pk_sp_x, y: pk_sp_y }
    Point sign_R = Point { x: sign_R_x, y: sign_R_y }
    SchnorrSignature sign = SchnorrSignature { R: sign_R, s: sign_s }

    field[4] sign_messages = [0; 4]
    sign_messages[0] = t_i_nonce
    sign_messages[1] = t_i_message_hash
    sign_messages[2] = t_i_tag
    sign_messages[3] = t_i_h

    field result = verify(pk, sign_messages, sign, VESTA_PARAMS)

    return result


def main(private field com_k, private field k, private field r_com, private field pk_id_x, private field pk_id_y, private field sign_start_R_x, private field sign_start_R_y, private field sign_start_s, private field t_start_nonce, private field t_start_tag, private field t_start_h, private field h_i, private field t_i_minus_1_nonce, private field t_i_minus_1_message_hash, private field t_i_minus_1_tag, private field t_i_minus_1_h, private field com_k_j, private field r_j, private field t_i_nonce, private field t_i_message_hash, private field t_i_tag, private field t_i_h, private field pk_sp_x, private field pk_sp_y, private field sign_ban_over_r_x, private field sign_ban_over_r_y, private field sign_ban_over_s) -> field:
  field com_k_output = generate_commitment(com_k, r_com, k)
  field verify_sign_start_result = verify_sign_start(pk_id_x, pk_id_y, sign_start_R_x, sign_start_R_y, sign_start_s, com_k, t_start_nonce, t_start_tag, t_start_h)

  field com_k_result = com_k_output - com_k // should be 0
  field verify_sign_result = verify_sign_start_result - 1 // should be 0
  field check_cred_result = com_k_result + verify_sign_result

  field check_non_cold_start_result = if t_start_h == t_i_h then 0 else (if t_i_tag != generate_prf(k, t_i_nonce, t_i_message_hash) then generate_commitment(com_k_j, r_j, k) - com_k_j + generate_hash(t_i_minus_1_nonce, t_i_minus_1_message_hash, t_i_minus_1_tag, t_i_minus_1_h) - h_i else generate_commitment(com_k_j, r_j, k) - com_k_j + generate_hash(t_i_minus_1_nonce, t_i_minus_1_message_hash, t_i_minus_1_tag, t_i_minus_1_h) - h_i + verify_sign_ban_over(pk_sp_x, pk_sp_y, sign_ban_over_r_x, sign_ban_over_r_y, sign_ban_over_s, t_i_nonce, t_i_message_hash, t_i_tag, t_i_h) - 1 fi) fi

  field result = check_cred_result + check_non_cold_start_result

  assert(result == 0)
  return result
