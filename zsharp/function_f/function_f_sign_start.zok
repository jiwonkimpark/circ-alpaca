import "../hash/poseidon"
from "../curves/point" import Point
from "../curves/params" import CurveParams, VESTA_PARAMS
from "../signature/schnorr" import SchnorrSignature, verify

const u32 DOMAIN_SEPARATOR_HASH = 0
const u32 DOMAIN_SEPARATOR_COMMITMENT = 1
const u32 DOMAIN_SEPARATOR_SIGNATURE = 2
const u32 DOMAIN_SEPARATOR_PRF = 3


// Sig.Verify(pk_id, sign_start, (com_k, t_start))
def verify_sign_start(field pk_id_x, field pk_id_y, field sign_start_R_x, field sign_start_R_y, field sign_start_s, field com_k, field t_start_nonce, field t_start_tag, field t_start_h) -> field:
    Point pk = Point { x: pk_id_x, y: pk_id_y }
    Point sign_R = Point { x: sign_start_R_x, y: sign_start_R_y }
    SchnorrSignature sign = SchnorrSignature { R: sign_R, s: sign_start_s }

    field[4] sign_messages = [0; 4]
    sign_messages[0] = com_k
    sign_messages[1] = t_start_nonce
    sign_messages[2] = t_start_tag
    sign_messages[3] = t_start_h

    field result = verify(pk, sign_messages, sign, VESTA_PARAMS)

    return result


// check Sig.verify(pk_id, sign_start, (com_k, t_start)) = 1
def main(private field com_k, private field pk_id_x, private field pk_id_y, private field sign_start_R_x, private field sign_start_R_y, private field sign_start_s, private field t_start_nonce, private field t_start_tag, private field t_start_h) -> field:
  field verify_sign_start = verify_sign_start(pk_id_x, pk_id_y, sign_start_R_x, sign_start_R_y, sign_start_s, com_k, t_start_nonce, t_start_tag, t_start_h)

  field result = verify_sign_start - 1
  assert(result == 0)

  return result
