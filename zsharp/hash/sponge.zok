import "permutation"
from "../curves/point" import Point
from "constants/capacity_elements" import CAPACITY_ELEMENTS

struct Sponge {
    u32 rate
    u32 absorb_pos
    u32 squeeze_pos
}


struct PermuteResult {
    field[9]    state       // the size of state vector is rate + 1 (rate is set to 8)
    u32         absorb_pos  // the absorb_pos after permutation (set to 0)
    u32         squeeze_pos // the squeeze_pos after permutation (set to 0)
}


struct AbsorbResult {
    field[9]    state
    Sponge      sponge
}


// Get initialized vector I
def start(u32 msg_len, u32 domain_separator) -> field[9]:
    field[9] elements = [0; 9]

    field capacity_element = CAPACITY_ELEMENTS[msg_len - 1][domain_separator]
    elements[0] = capacity_element

    return elements


def permute(field[9] state) -> PermuteResult:
    field[9] permuted = permutation(state, false)
    PermuteResult result = PermuteResult { state: permuted, absorb_pos: 0, squeeze_pos: 0 }
    return result


def absorb<N>(Sponge sponge, field[9] init_vector, field[N] inputs) -> AbsorbResult:
    field[9] state = init_vector

    for u32 i in 0..N do
        PermuteResult result = if sponge.absorb_pos == sponge.rate then permute(state) else PermuteResult {state: state, absorb_pos: sponge.absorb_pos, squeeze_pos: sponge.squeeze_pos  } fi
        state = result.state
        sponge.absorb_pos = result.absorb_pos

        field input = inputs[i]
        field old = state[sponge.absorb_pos + 1] // state[0] is for the capacity element, so we need to search absorb_pos + 1
        field new = old + input
        state[sponge.absorb_pos + 1] = new
        sponge.absorb_pos = sponge.absorb_pos + 1
    endfor

    sponge.squeeze_pos = sponge.rate

    AbsorbResult result = AbsorbResult { state: state, sponge: sponge }
    return result


def squeeze(Sponge sponge, field[9] state, u32 out_len) -> field[9]:
    field[out_len] out = [0; out_len]

    for u32 i in 0..out_len do
        PermuteResult result = if sponge.squeeze_pos == sponge.rate then permute(state) else PermuteResult {state: state, absorb_pos: sponge.absorb_pos, squeeze_pos: sponge.squeeze_pos } fi
        state = result.state
        sponge.absorb_pos = result.absorb_pos
        sponge.squeeze_pos = result.squeeze_pos

        out[sponge.squeeze_pos] = state[sponge.squeeze_pos]
        sponge.squeeze_pos = sponge.squeeze_pos + 1
    endfor

    return state


def digest(field[9] state) -> field:
    return state[0]


