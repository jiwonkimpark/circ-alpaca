// Modified /zokrates_stdlib/stdlib/hashes/poseidon/poseidon.zok for Pasta Curve

from "constants/params" import N_MAX, T_MAX, CONST_SIZE_MAX
from "constants/round_consts" import ROUND_CONSTS
from "constants/mds_Fp" import MDS_MATRIX as Fp_MDS_MATRIX
from "constants/mds_Fq" import MDS_MATRIX as Fq_MDS_MATRIX

def ark<N>(field[N] state, field[CONST_SIZE_MAX] c, u32 it) -> field[N]:
    for u32 i in 0..N do
        state[i] = state[i] + c[it + i]
    endfor
    return state

def sbox<N>(field[N] state, u32 f, u32 p, u32 r) -> field[N]:
    state[0] = state[0]**5
    for u32 i in 1..N do
        state[i] = if ((r < f/2) || (r >= f/2 + p)) then state[i]**5 else state[i] fi
    endfor
    return state

def mix<N>(field[N] state, field[9][9] m) -> field[N]:
    field[N] out = [0; N]
    for u32 i in 0..N do
        field acc = 0
        for u32 j in 0..N do
            acc = acc + (state[j] * m[i][j])
        endfor
        out[i] = acc
    endfor
    return out

const u32 R_F = 8   // number of full sbox rounds calculated by script
const u32 R_P = 57  // number of partial sbox rounds calculated by script

// the inputs of permutation is always 9 (rate + 1)
def main(field[9] inputs, bool Fp) -> field[9]:
    u32 rate = 8
    u32 t = rate + 1

    field[585]  c = ROUND_CONSTS
    field[9][9] m = Fq_MDS_MATRIX[t - 2]

    field[t] state = inputs

    for u32 r in 0..R_F+R_P do
        state = ark(state, c, r * t)
        state = sbox(state, R_F, R_P, r)
        state = mix(state, m)
    endfor

    return state