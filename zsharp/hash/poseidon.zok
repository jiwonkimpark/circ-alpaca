// Modified /zokrates_stdlib/stdlib/hashes/poseidon/poseidon.zok for Pasta Curve

from "constants/params" import N_MAX, T_MAX, CONST_SIZE_MAX
from "constants/round_consts" import ROUND_CONSTS
from "constants/mds_Fp" import MDS_MATRIX as Fp_MDS_MATRIX
from "constants/mds_Fq" import MDS_MATRIX as Fq_MDS_MATRIX

def ark<N>(field[N] state, field[CONST_SIZE_MAX] c, u32 it) -> field[N]:
    for u32 i in 0..N do
        state[i] = state[i] + c[it + i]
    endfor
    return state

def sbox<N>(field[N] state, u32 f, u32 p, u32 r) -> field[N]:
    state[0] = state[0]**5
    for u32 i in 1..N do
        state[i] = if ((r < f/2) || (r >= f/2 + p)) then state[i]**5 else state[i] fi
    endfor
    return state

def mix<N>(field[N] state, field[9][9] m) -> field[N]:
    field[N] out = [0; N]
    for u32 i in 0..N do
        field acc = 0
        for u32 j in 0..N do
            acc = acc + (state[j] * m[i][j])
        endfor
        out[i] = acc
    endfor
    return out

def main<N>(field[N] inputs, bool Fp) -> field:
    assert(N > 0 && N <= N_MAX) // max 8 inputs

    u32 t = N + 1
    u32[N_MAX] rounds_p = [56, 56, 56, 56, 57, 57, 57, 57] // max 8 inputs

    u32 f = 8 // set as 8 in the parameter generator script
    u32 p = rounds_p[(t - 2)]

    // Constants are padded with zeroes to the maximum value calculated by
    // t * (f + p) = 9 * (8 + 57) = 585, where `t` (number of inputs + 1) is a max of 9.
    // This is done to keep the function generic, as resulting array size depends on `t`
    // and we do not want callers passing down constants.
    // This should be revisited once compiler limitations are gone.

    field[CONST_SIZE_MAX]  c = ROUND_CONSTS[t - 2]
    field[T_MAX][T_MAX]    m = if Fp then Fp_MDS_MATRIX[t - 2] else Fq_MDS_MATRIX[t-2] fi

    field[t] state = [0; t]
    for u32 i in 1..t do
        state[i] = inputs[i - 1]
    endfor

    for u32 r in 0..f+p do
        state = ark(state, c, r * t)
        state = sbox(state, f, p, r)
        state = mix(state, m)
    endfor

    return state[0]