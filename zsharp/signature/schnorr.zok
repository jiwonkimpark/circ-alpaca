import "../hash/poseidon"
from "../curves/point" import Point
from "../curves/params" import CurveParams
from "../curves/arithmetics/weierstrass/scalar_mul" import point_scalar_multiplication as multiply
from "../curves/arithmetics/weierstrass/add" import point_addition as add
import "../../third_party/ZoKrates/zokrates_stdlib/stdlib/utils/pack/bool/unpack256"


struct SchnorrSignature {
    Point R // (Fq, Fq)
    field s
}

// Get `e` to check sG == (e * x + r)G
// Run poseidon hash on (pk, sign.R, msg) and get e
// The type of e is Fq, which is same as the base fields of pk, sign.R and msg.
def generate_e(Point pk, field[4] msg, SchnorrSignature sign) -> field:
    field[8] hash_msg = [0; 8] // C2::Base (Fq)
    hash_msg[0] = msg[0]
    hash_msg[1] = msg[1]
    hash_msg[2] = msg[2]
    hash_msg[3] = msg[3]
    hash_msg[4] = sign.R.x
    hash_msg[5] = sign.R.y
    hash_msg[6] = pk.x
    hash_msg[7] = pk.y

    field e = poseidon(hash_msg, 2) // based on Fq

    return e


def get_sG(Point g, bool[256] s, CurveParams params) -> Point:
    Point sG = multiply(g, s, params.a)
    return sG


def get_ex_plus_r_G(Point pk, bool[256] e, Point R, CurveParams params) -> Point:
    Point exG = multiply(pk, e, params.a)
    Point ex_plus_r_G = add(exG, R)
    return ex_plus_r_G


def unpack_to_le_bits(field f) -> bool[256]:
    bool[256] unpacked = unpack256(f)
    bool[256] le_bits = [false; 256]

    for u32 i in 0..256 do
        le_bits[i] = unpacked[256 - 1 - i]
    endfor

    return le_bits


// The code that actually check sG == (e * x + r)G
// Parameters
// `pk`: public key, point of (Fq, Fq) (C2::Base)
// `msg`: the message for the signature. In Mastadon's project case, msg consists of four Fq elements (C1::Scalar)
// `sign`: the schnorr signature to verify.
// `e`: the value of poseidon(pk, sign.R, msg), which was converted to Fp and then represented as bit array.
// `params`: the curve parameter needed for arithmetic operations
def verify(Point pk, field[4] msg, SchnorrSignature sign, CurveParams params) -> bool:
    Point G = Point {x: 28948022309329048855892746252171976963363056481941647379679742748393362948096, y: 2 }

    field e = generate_e(pk, msg, sign)
    bool[256] e_le_bits = unpack_to_le_bits(e)

    bool[256] s_le_bits = unpack_to_le_bits(sign.s)
    Point left_hand = get_sG(G, s_le_bits, params) // sG
    Point right_hand = get_ex_plus_r_G(pk, e_le_bits, sign.R, params) // e * xG + rG = (ex + r)G

    bool result = if left_hand.x == right_hand.x && left_hand.y == right_hand.y then true else false fi

    return result
